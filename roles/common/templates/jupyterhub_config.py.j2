import os, re, shutil, pwd

import requests

from tornado import gen

import logging


logger = logging.getLogger(__name__)

c = get_config()

##########################################
# BEGIN JUPYTERHUB APPLICATION
##########################################

# set to debug for testing
c.JupyterHub.log_level = 'DEBUG'

# Allows multiple single-server per user
c.JupyterHub.allow_named_servers = False

# Load data files
c.JupyterHub.data_files_path = '/usr/local/share/jupyterhub/'

# allow the hub to listen on any ip address
c.JupyterHub.hub_ip = '0.0.0.0'

# this is usually the hub container's name
c.JupyterHub.hub_connect_ip = 'jupyterhub'

# provide iframe support
c.JupyterHub.tornado_settings = {
    'headers': {
        'Content-Security-Policy': "frame-ancestors: * 'self'",
  }
}

# load data files
c.JupyterHub.data_files_path = '/usr/local/share/jupyterhub/'

# instructor1 and instructor2 have access to different shared servers
# bitdiddle, hacker, and reasoner students are from nbgrader quickstart
c.JupyterHub.load_groups = {
    'formgrade-{{course_id}}': [
        'instructor1',
        'instructor2',
        'grader-{{course_id}}',
    ],
    'nbgrader-{{course_id}}': ['student1', 'bitdiddle', 'hacker', 'reasoner',],
}

# Allo admin access to running Jupyter Notebooks
c.JupyterHub.admin_access = True

# Start the notebook server as a service. The port can be whatever you want
# and the group has to match the name of the group defined above.
api_token = os.environ.get('JUPYTERHUB_API_TOKEN')
c.JupyterHub.services = [
    {
        'name': '{{course_id}}',
        'url': 'http://{{course_id}}:8888',
        'oauth_no_confirm': True,
        'admin': True,
        'api_token': api_token,
    },
]

# Refrain from cleaning up servers when restarting the hub
c.JupyterHub.cleanup_servers = False

##########################################
# END JUPYTERHUB APPLICATION
##########################################

##########################################
# BEGIN CHP
##########################################

c.ConfigurableHTTPProxy.should_start = False
c.ConfigurableHTTPProxy.auth_token = str(os.environ.get('CONFIGURABLE_HTTP_PROXY'))
c.ConfigurableHTTPProxy.api_url = 'http://chp:8001'

##########################################
# END CHP
##########################################

##########################################
# BEGIN CUSTOM PACKED AUTHENTICATION
##########################################

from traitlets import List
from jupyterhub.auth import Authenticator

def _email_to_username(email: str) -> str:
    if not email:
        raise ValueError("Email is empty")
    # get local part of the email
    username = email.split('@')[0]
    # get username without +tag
    username = username.split('+')[0]
    # remove comments from email
    username = re.sub(r'\([^)]*\)', '', username)
    # remove special characters
    username = re.sub(r'[^\w-]+', '', username)
    # convert to lower case
    username = username.lower()

    return username

##########################################
# BEGIN GENERAL AUTHENTICATION
##########################################

# get from db/user pool/etc?
c.Authenticator.admin_users = {
    'admin',
    'instructor1',
    'instructor2',
    'service-' + str(os.environ.get('COURSE_ID')),
}

##########################################
# END GENERAL AUTHENTICATION
##########################################

##########################################
# BEGIN CUSTOM FIRSTUSE AUTHENTICATOR
##########################################

# Check membership
api_url = os.environ.get('CONFIGURABLE_HTTP_PROXY_API_URL')

# Get token
token = os.environ.get('JUPYTERHUB_API_TOKEN')

def _get_instructor_users(api_url, token):
    """Get users that are a member of the grader group"""
    logger.debug('Getting instructor users with endpoint %s endpoint and token %s', api_url, token)
    instructor_group_response = requests.get(api_url + '/groups/formgrade-' + str(os.environ.get('COURSE_ID')),
        headers={
                'Authorization': 'token %s' % token,
                },
    )
    instructor_group_response.raise_for_status()
    return instructor_group_response.json()

from firstuseauthenticator import FirstUseAuthenticator

class CustomFirstUseAuthenticator(FirstUseAuthenticator):

    @gen.coroutine
    def pre_spawn_start(self, user, spawner):
        """Assume everyone is a Learner except for those users in the instructor group"""
        instructors = _get_instructor_users(os.environ.get('JUPYTERHUB_API_URL'), os.environ.get('JUPYTERHUB_API_TOKEN'))
        user.spawner.environment['USER_ROLE'] = 'Learner'
        if user.name in instructors['users']:
            user.spawner.environment['USER_ROLE'] = 'Instructor'
            logger.debug('User %s has Instructor role', user.name)
        logger.debug('User %s has Learner role', user.name)

c.CustomFirstUseAuthenticator.create_users = False

c.JupyterHub.authenticator_class = CustomFirstUseAuthenticator

##########################################
# END CUSTOM FIRSTUSE AUTHENTICATOR
##########################################

##########################################
# BEGIN BASE SPAWNER
##########################################

# Limit memory
c.Spawner.mem_limit = '1G'

def create_dir_hook(spawner):
    """ Create user directory """
    username = spawner.user.name
    logger.debug('Creating home directory for %s', username)
    user_path = os.path.join('/home', username)
    if not os.path.exists(user_path):
        os.mkdir(user_path)
        shutil.chown(user_path, user=1000, group=100)
        os.chmod(user_path, 0o755)

c.Spawner.pre_spawn_hook = create_dir_hook

##########################################
# END BASE SPAWNER
##########################################

##########################################
# BEGIN CUSTOM DOCKERSPAWNER
##########################################

# Define a custom start function to get user's image based on role
from dockerspawner import DockerSpawner

# Refrain from pulling images to avoid proxy hangups
# https://github.com/jupyterhub/jupyterhub/issues/760
c.DockerSpawner.pull_policy = "never"

def _image_from_role(user_role: str) -> str:
    """Given a user role, return the right image"""
    if user_role == 'Learner':
        return str(os.environ.get('DOCKER_LEARNER_IMAGE'))
    if user_role == 'Instructor':
        return str(os.environ.get('DOCKER_INSTRUCTOR_IMAGE'))
    if user_role == 'Grader':
        return str(os.environ.get('DOCKER_GRADER_IMAGE'))
    else:
        return str(os.environ.get('DOCKER_STANDARD_IMAGE'))

class CustomDockerSpawner(DockerSpawner):
    def start(self):
        user_role = self.user.spawner.environment.get('USER_ROLE') or 'Learner'
        self.log.debug('User %s has role: %s', self.user.name, user_role)
        self.image = _image_from_role(str(user_role))
        self.log.debug('Starting with image: %s', self.image)
        return super().start()

# launch with custom dockerspawner class
c.JupyterHub.spawner_class = CustomDockerSpawner

# User data persistence
# see https://github.com/jupyterhub/dockerspawner#data-persistence-and-dockerspawner
notebook_dir = os.environ.get('DOCKER_NOTEBOOK_DIR')
if _image_from_role == 'Grader':
    notebook_dir = os.environ.get('GRADER_USERNAME')

c.DockerSpawner.notebook_dir = notebook_dir

# allow container to use any ip address
c.DockerSpawner.host_ip = '0.0.0.0'

spawn_cmd = os.environ.get('DOCKER_SPAWN_CMD', "start-singleuser.sh")
c.DockerSpawner.extra_create_kwargs.update({ 'command': spawn_cmd })

# tell the user containers to connect to our docker network
network_name = os.environ.get('DOCKER_NETWORK_NAME') or 'jupyter-network'
c.DockerSpawner.network_name = network_name

# Remove containers when stopping the hub
c.DockerSpawner.remove_containers = True
c.DockerSpawner.remove = True

# notebook image name
notebook_image_name = os.environ.get('NOTEBOOK_IMAGE_NAME') or 'jupyterhub-user'

# nbgrader exchange directory
exchange_dir = os.environ.get('EXCHANGE_DIR') or '/srv/nbgrader/exchange'

# custom account name
account_name = os.environ.get('ORGANIZATION_NAME') or 'test-account'

# mount volumes
c.DockerSpawner.volumes = {
    os.environ.get('NFS_ROOT') + account_name + '/home/{username}': notebook_dir,
    os.environ.get('NFS_ROOT') + account_name + '/exchange': exchange_dir,
}

##########################################
# END CUSTOM DOCKERSPAWNER
##########################################